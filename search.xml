<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>字节前端青训营：客户端容器：web浏览器以及跨端方法</title>
      <link href="/2023/04/22/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8%EF%BC%9Aweb%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BB%A5%E5%8F%8A%E8%B7%A8%E7%AB%AF%E6%96%B9%E6%B3%95/"/>
      <url>/2023/04/22/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8%EF%BC%9Aweb%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BB%A5%E5%8F%8A%E8%B7%A8%E7%AB%AF%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="客户端容器：web浏览器以及跨端方法">客户端容器：web浏览器以及跨端方法</h3><h4 id="一-浏览器架构">一.浏览器架构</h4><ol><li><p>浏览器架构演进</p><ul><li>单进程架构：所有模块运行在同一个进程里面，包括网络，插件，JavaScript运行环境等</li><li>多进程架构：主进程，网络进程，渲染进程，GPU进程，插件进程</li><li>面向服务架构：将原来的UI，数据库，文件，设备，网络等作为一个独立的基础服务</li></ul><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B.png" alt="image"></p></li><li><p>浏览器架构对比</p><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84%E5%AF%B9%E6%AF%94.png" alt="image"></p></li><li><p>浏览器架构：任务管理器</p><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8.png" alt="image"></p></li><li><p>多进程分工</p><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%88%86%E5%B7%A5.png" alt="image"></p></li></ol><h4 id="二-渲染进程">二.渲染进程</h4><ol><li><p>常见浏览器内核</p><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/%E5%B8%B8%E8%A7%81%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8.png" alt="image"></p></li><li><p>多线程架构</p><p>内部是多线程实现，主要负责页面渲染，脚本执行，事件处理，网络请求等</p><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9E%B6%E6%9E%84.png" alt="image"></p></li><li><p>JS引擎和渲染引擎对比</p><ul><li><p>解析执行JS</p></li><li><p>XML解析生成渲染树，显示在屏幕</p></li><li><p>桥接方式通信</p><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/%E5%BC%95%E6%93%8E%E5%AF%B9%E6%AF%94.png" alt="image"></p></li></ul></li><li><p>多进程工作流程</p><ul><li><p>网络线程负责加载网络资源</p></li><li><p>JS引擎解析JS脚本并执行</p></li><li><p>JS解析引擎空闲时，渲染线程立即工作</p></li><li><p>用户交互，定时器操作等产生回调函数放入任务队列中</p></li><li><p>事件线程进行事件循环，将队列里的任务取出交给js引擎执行</p><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%B7%A5%E4%BD%9C%E7%8A%B6%E6%80%81.png" alt="image"></p></li></ul></li></ol><h4 id="四-Chrome浏览器">四.Chrome浏览器</h4><ol><li><p>如何展示网页</p><p>浏览器输入URL之后发生了什么</p><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/%E5%A6%82%E4%BD%95%E5%B1%95%E7%A4%BA%E7%BD%91%E9%A1%B5.png" alt="image"></p></li><li><p>输入处理</p><ul><li><p>用户URL输入内容的话，UI线程会判断输入的是一个URL地址还是一个query查询条件</p></li><li><p>如果是URL，直接请求站点资源</p></li><li><p>如果是query，将输入发送给搜索引擎</p><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/%E8%BE%93%E5%85%A5%E5%A4%84%E7%90%86.png" alt="image"></p></li></ul></li><li><p>开始导航</p><ul><li><p>当用户按下回车，UI线程通知网络线程发起一个网络请求，来获取站点内容</p></li><li><p>请求过程中，tab处于loading状态</p><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/%E5%BC%80%E5%A7%8B%E5%AF%BC%E8%88%AA.png" alt="image"></p></li></ul></li><li><p>读取响应</p><ul><li><p>网络线程接收到HTTP响应之后，先检查响应头的媒体类型（MIME Type）</p></li><li><p>如果响应主体是一个HTML文件，浏览器将内容交给渲染进程处理</p></li><li><p>如果拿到的是其他类型文件，比如zip,exe等，则交给下载管理器处理</p><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/%E8%AF%BB%E5%8F%96%E5%93%8D%E5%BA%94.png" alt="image"></p></li></ul></li><li><p>寻找渲染进程</p><ul><li>网络进程做完所有检查后，会告知主进程数据已经准备完毕，主进程确认后为这个站点寻找一个渲染进程</li><li>主进程通过IPC消息告知渲染进程去处理本次导航</li><li>渲染进程开始接收数据并告知主进程自己已经开始处理，导航结束，进入文档加载阶段</li></ul></li><li><p>资源加载</p><ul><li>收到主进程消息后，开始加载HTML文档</li><li>除此之外，还需要加载子资源，比如一些图片，CSS样式文件以及JavaScript脚本</li></ul></li><li><p>构建渲染树</p><ul><li><p>构建DOM树，将HTML文件转化成浏览器能够理解的结构</p></li><li><p>构建CSSOM树，浏览器同样不认识CSS，需要将CSS代码转化为可理解的CSSOM</p></li><li><p>构建渲染树，渲染树是DOM树和CSSDOM树的结合</p><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/%E6%9E%84%E5%BB%BA%E6%B8%B2%E6%9F%93%E6%A0%91.png" alt="image"></p></li></ul></li><li><p>页面布局</p><ul><li><p>根据渲染树计算每个节点的位置和大小</p></li><li><p>在浏览器页面区域绘制元素边框</p></li><li><p>遍历渲染树，将元素以盒模型的形式写入文档流</p><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80.png" alt="image"></p></li></ul></li><li><p>页面绘制</p><ul><li>构建图层：为特定的节点生成专用图层</li><li>绘制图层：一些图层分成很多绘制指令，然后将这些指令按顺序组成一个绘制列表，交给合成线程</li><li>合成线程接收指令生成图块</li><li>栅格线程将图块进行栅格化</li><li>显示在屏幕上</li></ul></li><li><p>首屏优化</p></li></ol><pre><code>- 压缩，分包，删除无用代码- 静态资源分离- JS脚本非阻塞加载- 缓存策略- SSR- 预置loading，骨架屏</code></pre><ol start="11"><li><p>渲染优化</p><ul><li>GPU加速</li><li>减少回流重绘</li><li>离屏渲染</li><li>懒加载</li></ul></li><li><p>JS优化</p><ul><li>防止内促泄露</li><li>循环尽早break</li><li>合理使用闭包</li><li>减少DOM访问</li><li>防抖，节流</li><li>web workers</li></ul></li></ol><h4 id="三-跨端容器">三.跨端容器</h4><ol><li><p>为什么需要跨端：</p><ul><li><p>开发成本低，效率高</p></li><li><p>一致性体验</p></li><li><p>前端开发生态</p><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E8%B7%A8%E7%AB%AF.png" alt="image"></p></li></ul></li><li><p>跨端方案</p><ul><li><p>webview</p><ol><li><p>webview，即网页视图，用于加载网页URL，并展示其内容的控件</p></li><li><p>可以内嵌在移动端app中，实现前端混合开发，大多数混合框架都是基于webview的二次开发，比如Ionic, Cordova</p></li><li><p>常用WebView分类</p><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/%E5%B8%B8%E7%94%A8WebView%E5%88%86%E7%B1%BB.png" alt="image"></p></li><li><p>优势：</p><ol><li>一次开发，次次使用，学习成本低</li><li>随时发布，随时更新，不用下载安装包</li><li>移动设备不断提升，性能有保障</li><li>通过JSBridge和原生系统交互，实现复杂功能</li></ol></li><li><p>WebView使用原生能力</p><ol><li>JavaScript调用Native<ul><li>API注入：Native获取JavaScript环境上下文，对其挂载的对象或者方法进行拦截</li><li>使用WebView URL Scheme跳转拦截</li><li>IOS上window.webkit.messageHandler直接通信</li></ul></li><li>Native调用JavaScript<ul><li>直接通过WebView暴露的API执行JS代码</li><li>IOS webview.stringBYEaluatingJavaScriptFromString</li><li>Android webview.evaluateJavascript</li></ul></li></ol></li><li><p>Native通信</p><ol><li><p>JS环境中提供通信的JSBridge</p></li><li><p>Native端提供SDK响应JSBridge发出的调用</p></li><li><p>前端和客户端分别实现对应功能模块</p><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/Native%E9%80%9A%E4%BF%A1.png" alt="image"></p></li></ol></li><li><p>实现一个简易JSBridge</p><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/%E7%AE%80%E6%98%93JSBridge.png" alt="image"></p></li></ol></li><li><p>小程序</p><ol><li><p>微信，支付宝，百度小程序，小米直达号</p></li><li><p>渲染层-WebView</p></li><li><p>双线程 多WebView框架</p></li><li><p>数据通信 Native转发</p><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/%E5%B0%8F%E7%A8%8B%E5%BA%8F.png" alt="image"></p></li></ol></li><li><p>RN/WeeX</p><ol><li><p>原生组件渲染</p></li><li><p>React/Vue框架</p></li><li><p>virtual DOM</p></li><li><p>JSBridge</p><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/RN.png" alt="image"></p></li></ol></li><li><p>Lynx</p><ol><li><p>Vue</p></li><li><p>JS Core/V8</p></li><li><p>JSBinding</p></li><li><p>Native UI/Skia</p><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/Lynx.png" alt="image"></p></li></ol></li><li><p>Flutter</p><ol><li><p>widget</p></li><li><p>dart vm</p></li><li><p>skia图形库</p><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/Flutter.png" alt="image"></p></li></ol></li></ul></li><li><p>通用原理</p><ul><li><p>UI组件</p></li><li><p>渲染引擎</p></li><li><p>逻辑控制引擎</p></li><li><p>通信桥梁</p></li><li><p>底层API抹平表现差异</p><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/%E9%80%9A%E7%94%A8%E5%8E%9F%E7%90%86.png" alt="image"></p></li></ul></li><li><p>跨端方案对比</p><p><img src="/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/%E8%B7%A8%E7%AB%AF%E6%96%B9%E6%A1%88%E5%AF%B9%E6%AF%94.png" alt="image"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 字节前端训练营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 客户端容器：web浏览器以及跨端方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字节前端青训营：shell脚本与编程</title>
      <link href="/2023/04/19/shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/04/19/shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="shell脚本编程">shell脚本编程</h2><h4 id="一-shell基本概念">一.shell基本概念</h4><p><strong>1.概念</strong>：</p><p>终端：获取用户输入，展现运算结果的硬件设备</p><p>tty: teletypewriter的简称，和终端等价，早期指电传印机，在Linux中是输入输出环境</p><p>终端模拟器：Mac terminal,iTerm2等，关联虚拟tty的输入输出软件</p><p>shell：command interpreter 处理来自终端模拟器的输入，解释执行之后输出结果给终端</p><p>bash: shell的具体实现</p><p>物理终端=&gt;软件终端=&gt;终端模拟器=&gt;shell<br>tty或者说终端最开始指的是获取用户输入并输出的物理设备，比如电传打字机，在Linux中是接收用户输入，输出结果的终端仿真软件，比如我们用的mac terminal，iterm2等，更强输入辅助功能，画面绘制输出的终端模拟器，而tty变成一个虚拟概念，是Linux的一个程序，每个终端模拟器关联一个虚拟tty，和内核打交道，我们可以在终端模拟器中输入tty查看关联到的虚拟tty，bash是shell的一种具体实现，可以理解成实例和类的关系</p><p><strong>2.概念</strong>：</p><p>shell不仅提供了与内核和设备交互的方法，还集成了一些今天软件开发中通用语的设计模式（比如管道和过滤器），具备控制流程，循环，变量，命令查找的机制，既是命令解释器，也是一门编程语言，作为命令解释器，他提供给用户接口，使用丰富的GNU工具集，第三方的或者内置的，比如cd,pwd,exec,test,netstat等等</p><p><img src="/shell%E8%84%9A%E6%9C%AC%E4%B8%8E%E7%BC%96%E7%A8%8B/shell%E6%9E%84%E6%88%90.png" alt="image"></p><h3 id="二-语法与命令">二.语法与命令</h3><p><strong>1.变量</strong>：</p><p><img src="/shell%E8%84%9A%E6%9C%AC%E4%B8%8E%E7%BC%96%E7%A8%8B/shell%E5%8F%98%E9%87%8F.png" alt="image"></p><p><strong>2.自定义变量</strong>：</p><p>-p显示变量及其被声明的类型</p><p><img src="/shell%E8%84%9A%E6%9C%AC%E4%B8%8E%E7%BC%96%E7%A8%8B/shell%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F.png" alt="image"></p><p><strong>3.系统环境变量</strong>：</p><p>bash shell在启动时总要配置其运行环境，例如初始化环境变量，设置命令提示符，指定系统命令路径等</p><p><img src="/shell%E8%84%9A%E6%9C%AC%E4%B8%8E%E7%BC%96%E7%A8%8B/shell%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="image"></p><p><strong>4.配置环境加载</strong>：</p><p>如果取得bash需要完整的登陆流程，我们称之为login shell,比如ssh远程登录一台主机<br>不需要登陆的bash我们称之为non-login bash，比如在原来的bash中执行bash开启子进程，执行一些外部命令<br>如果修改了配置文件， 不会立即生效，需要我们重启终端或者执行source命令</p><p><img src="/shell%E8%84%9A%E6%9C%AC%E4%B8%8E%E7%BC%96%E7%A8%8B/shell%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8A%A0%E8%BD%BD.png" alt="image"></p><p><strong>5.运算符和引用</strong>：</p><p>双引号：部分引用，使用这种引用时，$,`(反引号)，（转义符）这3 个还是会解析成特殊的意义<br>单引号：完全引用，只原样输出<br>反引号：执行命令<br>cmd &amp;实现让命令在后台运行<br>使用方法一时，当我们关闭终端，命令就会停止运行，加上nohup可以在关闭终端后不停止命令</p><p><img src="/shell%E8%84%9A%E6%9C%AC%E4%B8%8E%E7%BC%96%E7%A8%8B/shell%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E5%BC%95%E7%94%A8.png" alt="image"></p><p><strong>6.管道</strong>：</p><p>如果需要互通，比如第一个命令的返回传递给第二个命令，就需要用到管道了，管道的本质是将多个程序进行了一个连接，和信号一样，也是进程通信的方式之一</p><p>管道和管道运算符 | ，作用是将前一个命令的结果传递给后面的命令</p><p>语法：cmd1 | cmd2</p><p>要求：管道右侧的命令必须能接受标准输入才行，比如grep命令，Is,mv等不能直接使用，可以使用xargs预处理</p><p>注意：管道命令仅仅处理stdout，对于stderr会予以忽略，可以使用set -o pipefail设置shell遇到管道错误退出</p><p><img src="/shell%E8%84%9A%E6%9C%AC%E4%B8%8E%E7%BC%96%E7%A8%8B/shell%E7%AE%A1%E9%81%93.png" alt="image"></p><p><strong>7.重定向</strong>：</p><p>输出重定向符号</p><p>‘&gt;’ :覆盖写入文件</p><p>‘&gt;&gt;’ :追加写入文件</p><p>2&gt;:错误输出写入文件</p><p>&amp;&gt;:正确和错误输出同意写入</p><p>输入重定向符号： &lt; &lt;&lt;</p><p>每个shell命令在执行时都会打开三个文件描述符，文件描述符0，1，2，分别对应stdin,stdout,stderr,这桑文件描述符默认指向终端输入，终端输出，那么当命令需要获取输入的时候，他会去读取fd0,当要输出的时候它会像fd1,fd2写入，改变这些描述符指向的行为叫做重定向</p><p>&lt;&lt;比较特殊，表示继续沿用当前的标准输入，只是当识别到指定的标识符后停止，将接收到的内容作为stdin</p><p><img src="/shell%E8%84%9A%E6%9C%AC%E4%B8%8E%E7%BC%96%E7%A8%8B/shell%E9%87%8D%E5%AE%9A%E5%90%91.png" alt="image"></p><p><strong>8.判断命令</strong>：</p><p>shell中提供了test,[,[[，三种判断符号，可用于整数测试，字符串测试，文件测试</p><p>语法：test condition  [ condition ]  [[ condition ]]</p><p>注意：</p><p>中括号前后要有空格符</p><p>[  和test是命令，只能用自己支持的标志位，&lt;,&gt;,=只能用来比较字符串</p><p>中括号内的变量最好都是用引号括起来</p><p>[[更丰富，在整型比较中支持&lt;,&gt;,=，在字符串比较中支持=~正则</p><p><img src="/shell%E8%84%9A%E6%9C%AC%E4%B8%8E%E7%BC%96%E7%A8%8B/shell%E5%88%A4%E6%96%AD%E5%91%BD%E4%BB%A4.png" alt="image"></p><p><strong>9.分支语句</strong>：</p><p>语法一：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if condition ; then</span><br><span class="line">程序段</span><br><span class="line">elif condition ; then</span><br><span class="line">程序段</span><br><span class="line">esle</span><br><span class="line">程序段</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>语法二：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">case $变量 in:</span><br><span class="line">&quot;第一个变量内容&quot;)</span><br><span class="line">程序段</span><br><span class="line">;;</span><br><span class="line">&quot;第一个变量内容&quot;)</span><br><span class="line">程序段</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">程序段</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p><strong>10.循环</strong>：</p><p>while循环：<code> while condition ; do 程序段 ; done</code></p><p>until循环 (util条件成立时会立即推出循环)：<code>until condition ; do 程序段 ; done</code></p><p>for循环 ：<code>for var in [words...] ; do 程序段  ; done</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">let num=0</span><br><span class="line">until [ $num -gt 10] ;</span><br><span class="line">do</span><br><span class="line">echo &quot;current idx : $num&quot;</span><br><span class="line">((num++))</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>11.函数</strong>：</p><p>函数也是命令<br>为了函数内定义的变量不污染全局，最好用local定义，或者在函数退出之前使用unset处理一下</p><p>语法一：<code>funcName () &#123;echo &quot;abc&quot;;&#125;</code></p><p>语法二：<code>function funcName() &#123;echo &quot;abc&quot;;&#125;</code></p><p>注意：</p><p>shell自上而下执行，函数必须在使用前定义</p><p>函数获取变量和shell script类似，$0代表函数名，后续参数通过$1,$2…获取</p><p>函数内return仅仅表示函数执行状态，不代表函数执行结果</p><p>返回结果一般使用echo,printf在外面使用$(),``来获取结果</p><p>如果没有return，函数状态是上一条命令的执行状态，储存在$?中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">printname()</span><br><span class="line">&#123;</span><br><span class="line">if [ $# -lt 2] ; then</span><br><span class="line">echo &quot;illegal parameter.&quot;</span><br><span class="line">exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;firstname is : $1&quot;</span><br><span class="line">echo &quot;lastname id :$2&quot;</span><br><span class="line">&#125;</span><br><span class="line">printname jacky chen</span><br></pre></td></tr></table></figure><p><strong>12.模块化</strong>：</p><p>模块化的原理是在当前shell内执行函数文件，方式：</p><p>source [函数库的路径]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">add函数</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">@<span class="built_in">return</span> paltForm</span></span><br><span class="line">function add()&#123;</span><br><span class="line">declare -i res=$1+$@</span><br><span class="line">echo $res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line">source &#x27;./math.sh&#x27;</span><br><span class="line">total=$(add 1 2)</span><br><span class="line">echo $total</span><br></pre></td></tr></table></figure><p><strong>14,常用命令</strong>：</p><p><img src="/shell%E8%84%9A%E6%9C%AC%E4%B8%8E%E7%BC%96%E7%A8%8B/shell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.png" alt="image"></p><h3 id="三-执行过程和原理">三.执行过程和原理</h3><p><strong>1.执行:</strong></p><p>1.shell脚本一般以.sh结尾也可以没有，这是一个约定，第一行需要指定用什么命令解释器来执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/new bash</span></span><br></pre></td></tr></table></figure><p>2.启动方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">文件名运行</span></span><br><span class="line">./filename.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解释器运行</span></span><br><span class="line">bash ./filename.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">source</span>运行</span></span><br><span class="line">source ./filename.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>#! 是内核识别并选择合适的解释器之后，将文本文件再交给解释器执行</p><p><strong>3.执行过程</strong><br>1.字符解析</p><ul><li>识别换行符，分号做行的分割</li><li>识别命令连接符（|| &amp;&amp; 管道）做命令的分割</li><li>识别空格，tab符，做命令和参数的分割</li></ul><p>2.shell展开，例如｛1…3}解析为1 2 3<br>3.重定向，将stdin,stdout,stderr的文件描述符进行指向变更<br>4.执行命令</p><ul><li>builtin直接执行</li><li>非builtin使用$path查找，然后启动子程序进行</li></ul><p>5.收集状态并返回</p><p><img src="/shell%E8%84%9A%E6%9C%AC%E4%B8%8E%E7%BC%96%E7%A8%8B/shell%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png" alt="image"><br>这个架构类似一个流水线，在里面进行输入分析和解析<br>bash会以一些特殊字符作为分隔符，将文本进行分段解析，最主要是回车还有分号，在bash脚本中是以回车</p><p><strong>4.shell展开</strong>：</p><p>大括号展开 brace expansion {…}</p><p>一般由三部分组成，前缀，一对大括号，后缀，大括号内可以是逗号分隔的字符串序列，也可以是序列表达式{x…y[…incr]}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">字符串序列</span></span><br><span class="line">a&#123;b,c,d&#125;e =&gt; abe ace ade</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">表达式序列 数字可以使用incr调整增量，字母不行</span></span><br><span class="line">&#123;1...5&#125; -&gt; 1 2 3 4 5</span><br><span class="line">&#123;1..5..2&#125; -&gt; 1 3 5</span><br><span class="line">&#123;a..e&#125; -&gt; a b c d e</span><br></pre></td></tr></table></figure><p>波浪号展开 tilde expansion ~</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">当前用户主目录</span></span><br><span class="line">~  -&gt;  $HOME</span><br><span class="line">-/foo  -&gt; $HOME/foo</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">指定用户的主目录</span></span><br><span class="line">-fred/foo  -&gt; 用户fred的$HOME/foo</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">当前工作目录</span></span><br><span class="line">-+/foo  -&gt;  $PWD/foo</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">上一个工作目录</span></span><br><span class="line">--/foo  -&gt;  $($OLDPWD-&#x27;--&#x27;)/foo</span><br></pre></td></tr></table></figure><p>参数展开 shell parameter expansion  ${ }</p><p>1.间接参数扩展 ${!parameter},其中引用的参数并不是parameter而是parameter实际的值</p><p>2.参数长度 $</p>]]></content>
      
      
      <categories>
          
          <category> 字节前端训练营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> shell脚本与编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字节前端青训营：编程范式</title>
      <link href="/2023/04/16/%E4%B8%89.%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/"/>
      <url>/2023/04/16/%E4%B8%89.%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="编程范式">编程范式</h3><h4 id="1-编程语言">1.编程语言</h4><ul><li><p>机器语言</p></li><li><p>汇编语言</p></li><li><p>高级语言</p></li><li><p>C/C++</p><ol><li>C：中级语言，过程式语言代表<ul><li>可对位，字节，地址直接操作</li><li>代码和数据分离倡导结构化编程</li><li>功能齐全：数据类型和控制逻辑多样化</li><li>可移植能力强</li></ul></li><li>C/C++：C++面向对象语言代表<ul><li>C with Classes</li><li>继承</li><li>权限控制</li><li>虚函数</li><li>多态</li></ul></li></ol></li><li><p>Lisp</p><ul><li>与机器无关</li><li>列表：代码即数据</li><li>闭包</li></ul></li><li><p>javascript：基于原型和头等函数的多范式语言</p><ul><li>过程式</li><li>面向对象</li><li>函数式</li><li>响应式*</li></ul><p><img src="/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%80%BB%E7%BB%93.png" alt="image"></p></li></ul><h4 id="2-编程范式">2.编程范式</h4><ol><li><p>什么是编程范式</p><p><img src="/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7.png" alt="image"></p></li><li><p>常见编程范式</p><p><img src="/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F.png" alt="image"></p></li><li><p>过程式编程：</p><ul><li><p>自顶向下</p><p><img src="/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B1.png" alt="image"></p><p><img src="/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B2.png" alt="image"></p></li><li><p>结构化编程</p><p><img src="/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B.png" alt="image"></p></li></ul></li><li><p>JS中的面向过程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> car = &#123;<span class="comment">//数据</span></span><br><span class="line">    meter : <span class="number">10</span></span><br><span class="line">    speed : <span class="number">10</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">advanceCar</span>(<span class="params">meter</span>)&#123;<span class="comment">//算法</span></span><br><span class="line">    <span class="keyword">while</span>(car&lt;meter)&#123;</span><br><span class="line">        car.<span class="property">meter</span> += car.<span class="property">speed</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;car,advanceCar&#125; <span class="keyword">from</span> <span class="string">&#x27;./car&#x27;</span>;</span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;before&#x27;</span>,car);</span><br><span class="line">    <span class="title function_">advanceCar</span>(<span class="number">1000</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;after&#x27;</span>,car);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>面向过程问题</p><ul><li>数据与算法关联弱</li><li>不利于修改和扩充</li><li>不利于代码重用</li></ul></li><li><p>面向对象编程</p><ul><li><p>封装</p><ul><li><p>关联数据与算法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">    <span class="comment">//数据</span></span><br><span class="line">    meter = <span class="number">100</span></span><br><span class="line">    speed = <span class="number">100</span></span><br><span class="line">    <span class="comment">//算法</span></span><br><span class="line">    <span class="title function_">advance</span>(<span class="params">meter</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">meter</span>&lt;meter)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">meter</span> += <span class="variable language_">this</span>.<span class="property">speed</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">getSpec</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`meter: <span class="subst">$&#123;<span class="variable language_">this</span>.meter&#125;</span>; speed: <span class="subst">$&#123;<span class="variable language_">this</span>.speed&#125;</span>;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funciton <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> car = <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">    car.<span class="title function_">advance</span>(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>继承</p><p>无需重写的情况下进行功能扩充</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FlyCar</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Car</span>&#123;</span><br><span class="line">height = <span class="number">100</span> <span class="comment">//新数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//新算法</span></span><br><span class="line">    <span class="title function_">fly</span>(<span class="params">height</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">height</span>&lt;height)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">height</span> += <span class="variable language_">this</span>.<span class="property">speed</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多态</p><p>不同的结构可以进行接口共享，进而达到函数复用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FlyCar</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Car</span>&#123;</span><br><span class="line">    height = <span class="number">100</span></span><br><span class="line">    <span class="title function_">fly</span>(<span class="params">height</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">height</span>&lt;height)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">height</span>+=<span class="variable language_">this</span>.<span class="property">speed</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//接口复用</span></span><br><span class="line">    <span class="title function_">getSpec</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">getSpec</span>() + <span class="string">`height:$(this.height);`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">funciton <span class="title function_">showCarSpec</span>(<span class="params">car</span>)&#123;<span class="comment">//函数复用</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Model</span>(&#123;</span><br><span class="line">        <span class="attr">content</span>: car.<span class="title function_">getSpec</span>(),</span><br><span class="line">    &#125;).<span class="title function_">show</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>依赖注入*</p><p>去除代码注入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">engine </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>面向对象编程的五大原则</p><ul><li>单一职责原则SRP</li><li>开放封闭原则OCP</li><li>里氏替换原则LSP</li><li>依赖倒置原则DIP</li><li>接口分离原则ISP</li></ul></li><li><p>面向对象问题：</p><p>面向对象编程语言的问题在于它总是附带着所有它需要的隐含环境。</p></li><li><p>函数式编程</p><ul><li>函数是第一等公民</li><li>纯函数/无副作用</li><li>高阶函数/闭包</li></ul></li><li><p>函数式编程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">BlogController</span> = &#123;  <span class="comment">//聚合转发</span></span><br><span class="line">    <span class="title function_">index</span>(<span class="params">posts</span>) &#123; <span class="keyword">return</span> <span class="title class_">Views</span>.<span class="title function_">index</span>(posts);&#125;,</span><br><span class="line">    <span class="title function_">show</span>(<span class="params">post</span>) &#123; <span class="keyword">return</span> <span class="title class_">Views</span>.<span class="title function_">show</span>(post);&#125;,</span><br><span class="line">    <span class="title function_">create</span>(<span class="params">attrs</span>) &#123; <span class="keyword">return</span> <span class="title class_">Db</span>.<span class="title function_">create</span>(attrs);&#125;,</span><br><span class="line">    <span class="title function_">update</span>(<span class="params">post,attrs</span>) &#123; <span class="keyword">return</span> <span class="title class_">Db</span>.<span class="title function_">update</span>(post,attrs);&#125;,</span><br><span class="line">    <span class="title function_">destroy</span>(<span class="params">post</span>) &#123;<span class="keyword">return</span> <span class="title class_">Db</span>.<span class="title function_">destory</span>(post);&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">BlogController</span> = &#123;</span><br><span class="line">    <span class="attr">index</span>: <span class="title class_">Views</span>.<span class="property">index</span>,</span><br><span class="line">    <span class="attr">show</span>: <span class="title class_">Views</span>.<span class="property">show</span>,</span><br><span class="line">    <span class="attr">create</span>: <span class="title class_">Db</span>.<span class="property">create</span>,</span><br><span class="line">    <span class="attr">update</span>: <span class="title class_">Db</span>.<span class="property">update</span>,</span><br><span class="line">    <span class="attr">destroy</span>: <span class="title class_">Db</span>.<span class="property">destroy</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>优势</p><ul><li><p>可缓存</p></li><li><p>可移植</p></li><li><p>可测试</p></li><li><p>可推理</p></li><li><p>可并行</p></li><li><p>Pure function</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> retireAge = <span class="number">60</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">retirePerson</span>(<span class="params">p</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p.<span class="property">age</span> &gt; retireAge)&#123;</span><br><span class="line">        p.<span class="property">status</span> = <span class="string">&#x27;retired&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">retirePerson</span>(<span class="params">p</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> retireAge = <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">if</span>(p.<span class="property">age</span> &gt; retireAge)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            ...p,</span><br><span class="line">            status <span class="string">&#x27;retired&#x27;</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Currying</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">curry</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> arity = fn.<span class="property">length</span>;<span class="comment">//闭包</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">$curry</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(args.<span class="property">length</span> &lt; arity)&#123;</span><br><span class="line">            <span class="keyword">return</span> $curry.<span class="title function_">bind</span>(<span class="literal">null</span>,...args);<span class="comment">//闭包</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fn.<span class="title function_">call</span>(<span class="literal">null</span>,...args);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b,c</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//参数重复</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add_ = <span class="title function_">curry</span>(add);</span><br><span class="line"><span class="keyword">const</span> add12 = <span class="title function_">add_</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//之前参数存入闭包</span></span><br><span class="line"><span class="title function_">add12</span>(<span class="number">5</span>);</span><br><span class="line"><span class="title function_">add12</span>(<span class="number">4</span>);</span><br><span class="line"><span class="title function_">add12</span>(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add1 = <span class="title function_">add_</span>(<span class="number">1</span>);</span><br><span class="line"><span class="title function_">add1</span>(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line"><span class="title function_">add1</span>(<span class="number">3</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure></li><li><p>Composition</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">compose</span> = (<span class="params">...fns</span>) =&gt; (...args) = fns.<span class="title function_">reduceRight</span>(</span><br><span class="line">    <span class="function">(<span class="params">res,fn</span>) =&gt;</span>[fn.<span class="title function_">call</span>(<span class="literal">null</span>,...res)],args</span><br><span class="line">)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toUpperCase</span> = x =&gt; x.<span class="title function_">topUppperCase</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">log</span> = x =&gt; <span class="variable language_">console</span>.<span class="property">log</span>;</span><br><span class="line"><span class="comment">//手动组合</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">alterUpperCase</span>(<span class="params">str</span>)&#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="title function_">toUpperCase</span>(x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> alterUpperCase = <span class="title function_">compose</span>(log, toUpperCase);</span><br></pre></td></tr></table></figure></li><li><p>Functor</p><p>可以当做函数的容器，类型支持对容器内元素的操作</p><p>常见的functor: Array(lterable).map , Promise.then</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a.<span class="property">b</span> != numm ? (a.<span class="property">b</span>.<span class="property">c</span> != <span class="literal">null</span> ? (a.<span class="property">b</span>.<span class="property">c</span>.<span class="property">d</span> !== <span class="literal">null</span> ?a.<span class="property">b</span>.<span class="property">c</span>.<span class="property">d</span>.<span class="property">e</span> :<span class="literal">null</span>):<span class="literal">null</span>):<span class="literal">null</span></span><br><span class="line">==&gt;&gt;  <span class="keyword">new</span> <span class="title class_">Maybe</span>(a).<span class="title function_">map</span>(<span class="title function_">prpo</span>(<span class="string">&#x27;b&#x27;</span>)).<span class="title function_">map</span>(<span class="title function_">prpo</span>(<span class="string">&#x27;c&#x27;</span>)).<span class="property">map</span>.(<span class="title function_">prpo</span>(<span class="string">&#x27;e&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Matbe</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">Svalue</span> = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">map</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$value</span> == <span class="literal">null</span> ? <span class="variable language_">this</span> : <span class="keyword">new</span> <span class="title class_">Maybe</span>(<span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">$value</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Monad</p><p>可以去除嵌套容器的容器类型</p><p>常见monad: Array.flaMap , Promise.then</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>].<span class="title function_">flaMap</span>(<span class="function">() =&gt;</span> ([<span class="number">1</span>,<span class="number">2</span>]))</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>*r))</span><br><span class="line"></span><br><span class="line"><span class="title class_">Maybe</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">flat</span> = <span class="keyword">function</span> (<span class="params">level = <span class="number">1</span></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">$value</span>?.<span class="property">constructor</span> !== <span class="title class_">Maybe</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Maybe</span>(<span class="variable language_">this</span>.<span class="property">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> level ? <span class="variable language_">this</span>.<span class="property">$value</span>.<span class="title function_">flat</span>(--level) : <span class="variable language_">this</span>.<span class="property">$value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Applicative</p><p>直接两个容器直接操作</p><p>Identity：Maybe(id).ap(v) === v;</p><p>Homomorphism: Maybe(f).ap(Maybe(x)) === Maybe(f(x));</p><p>Interchange: v.ap(Maybe(x)) === Maybe(f =&gt; f(x)).ap(v);</p><p>Composition: Maybe(compose).ap(u).ap(w) === u.ap(v.ap(w));</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">ap</span>(<span class="params">other</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> other.<span class="title function_">map</span>(<span class="variable language_">this</span>.<span class="property">$value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Maybe</span>(<span class="number">2</span>).<span class="title function_">map</span>(<span class="function"><span class="params">two</span> =&gt;</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Maybe</span>(<span class="number">3</span>).<span class="title function_">map</span>(<span class="title function_">add</span>(two))</span><br><span class="line">                ).<span class="title function_">flat</span>();<span class="comment">//Maybe(Maybe(5))</span></span><br><span class="line">==&gt;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Maybe</span>(add)</span><br><span class="line">.<span class="title function_">ap</span>(<span class="keyword">new</span> <span class="title class_">Maybe</span>(<span class="number">3</span>))</span><br><span class="line">.<span class="title function_">ap</span>(<span class="keyword">new</span> <span class="title class_">Maybe</span>(<span class="number">2</span>));</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>响应式编程</p><ul><li><p>异步/离散的函数编程</p><ul><li>数据流</li><li>操作符<ul><li>过滤</li><li>合并</li><li>转化</li><li>高阶</li></ul></li></ul></li><li><p>Observable</p><ul><li><p>观察者模式</p></li><li><p>迭代器模式</p></li><li><p>Promise/EventTarget 超集</p><p><img src="/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/observable.png" alt="image"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">const</span> &#123; fromEvent &#125; = rxjs;</span><br><span class="line"><span class="keyword">const</span> clicks = <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>,<span class="string">&#x27;click&#x27;</span>);<span class="comment">//Observable</span></span><br><span class="line"><span class="keyword">const</span> sub = clicks.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));<span class="comment">//订阅数据</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> sub.<span class="title function_">unsubscribe</span>(), <span class="number">5000</span>);<span class="comment">//取消订阅</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>操作符</p><ul><li><p>响应式编程的“compose&quot;</p><ul><li><p>合并</p></li><li><p>过滤</p></li><li><p>转化</p></li><li><p>异常处理</p></li><li><p>多播</p><p><img src="/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/%E6%93%8D%E4%BD%9C%E7%AC%A6.png" alt="image"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; fromEvent &#125; = rxjs;</span><br><span class="line"><span class="keyword">const</span> clicks = <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>,<span class="string">&#x27;click&#x27;</span>);</span><br><span class="line"><span class="comment">//转化操作符</span></span><br><span class="line"><span class="keyword">const</span> positions = clicks.<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">map</span>(<span class="function"><span class="params">ev</span> =&gt;</span> ev.<span class="property">clientX</span>),</span><br><span class="line">    <span class="title function_">map</span>(<span class="function"><span class="params">clientX</span> =&gt;</span> ++cilentX)</span><br><span class="line">);</span><br><span class="line">positions.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Monad</p><p>去除嵌套的Observable</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; fromEvent, flatMap, fetch&#125; = rxjs;</span><br><span class="line"><span class="keyword">const</span> clicks = <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>,<span class="string">&#x27;click&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> users = users.<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">flatMap</span>(<span class="function"><span class="params">e</span> =&gt;</span> fetch.<span class="title function_">fromFetch</span>(<span class="comment">//嵌套Observable</span></span><br><span class="line">        <span class="string">&#x27;网址&#x27;</span></span><br><span class="line">    )),</span><br><span class="line">    <span class="title function_">flatMap</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>())<span class="comment">//嵌套Promise</span></span><br><span class="line">);</span><br><span class="line">users.<span class="title function_">subscribe</span>(<span class="function"><span class="params">date</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data));</span><br></pre></td></tr></table></figure></li></ul></li><li><p>总结</p><p><img src="/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F%E6%80%BB%E7%BB%93.png" alt="image"></p></li></ul></li></ol><h4 id="3-领域特定语言">3.领域特定语言</h4><ol><li><p>定义：Domain-specific language（DSL）：应用于特定领域的语言</p><ul><li>HTML</li><li>SQL</li></ul></li><li><p>语言运行</p><p><img src="/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/%E8%AF%AD%E8%A8%80%E8%BF%90%E8%A1%8C.png" alt="image"></p></li><li><p>Lexer</p><p>SQL Token分类</p><ul><li><p>注释</p></li><li><p>关键字</p></li><li><p>操作符</p></li><li><p>空格</p></li><li><p>字符串</p></li><li><p>变量</p><p><img src="/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/lexer.png" alt="image"></p></li></ul></li><li><p>Parser语法规则</p><ul><li>上下文无关语法规则</li></ul><p>推导符：表示非终结符到（非终结符或者终结符）的关系</p><p>终结符：构成句子的实际内容，可以简单理解为词法分析中的token</p><p>非终结符：符号或者变量的有限集合，表示在句子中不同类型的短语或者子句</p><ul><li><p>LL</p><p>从左到右检查，从左到右构建语法树</p><p><img src="/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/LL.png" alt="image"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">selectStatment</span>(<span class="params">node</span>)&#123;</span><br><span class="line">    <span class="comment">//构建节点并递归</span></span><br><span class="line">    node.<span class="property">children</span>.<span class="title function_">push</span>(<span class="title function_">matchToken</span>(<span class="string">&#x27;select&#x27;</span>));</span><br><span class="line">    <span class="keyword">const</span> selectListNode = &#123;<span class="attr">type</span>: <span class="string">&#x27;selectList&#x27;</span>,<span class="attr">children</span>: []&#125;;</span><br><span class="line">    node.<span class="property">children</span>.<span class="title function_">push</span>(selectListNode);</span><br><span class="line">    <span class="title function_">selectList</span>(selelctListNode);</span><br><span class="line">    node.<span class="property">children</span>.<span class="title function_">push</span>(<span class="title function_">matchToken</span>(<span class="string">&#x27;from&#x27;</span>));</span><br><span class="line">    node.<span class="property">children</span>.<span class="title function_">push</span>(<span class="title function_">tableName</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">selectList</span>(<span class="params">&#123; children &#125;</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> node;</span><br><span class="line">    <span class="keyword">while</span>(node = <span class="title function_">selectField</span>())&#123;</span><br><span class="line">        children.<span class="title function_">push</span>(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">selectField</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="title function_">currentToken</span>().<span class="title function_">match</span>(<span class="regexp">/\w+/</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123; ( <span class="attr">type</span>: <span class="string">&#x27;field&#x27;</span>, <span class="attr">token</span>: <span class="title function_">nextToken</span>())&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>LR</p><p>从左到右检查，从右到左构建语法树</p><p><img src="/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/LR.png" alt="image"></p></li><li><p>tools</p><p><img src="/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/tools.png" alt="image"></p></li><li><p>visitor</p></li><li><p><img src="/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/visitor.png" alt="image"></p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 字节前端训练营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 编程范式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字节前端青训营：Linux基础</title>
      <link href="/2023/04/15/Linux%E5%9F%BA%E7%A1%80%EF%BC%88%E9%9D%92%E8%AE%AD%EF%BC%89/"/>
      <url>/2023/04/15/Linux%E5%9F%BA%E7%A1%80%EF%BC%88%E9%9D%92%E8%AE%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="一-计算机硬件">一.计算机硬件</h3><p><strong>计算机由五大基本单元组成：控制器，运算器，存储器，输入输出两个单元</strong></p><p><strong>1.控制器</strong>:协调和指挥计算机各个部件进行按需作业</p><p><strong>2.运算器</strong>:算数与逻辑运算的处理</p><p><strong>3.存储器</strong>:内存和外存，磁盘光驱属于外存</p><p><strong>4.输入单元</strong>:鼠标，键盘等</p><p><strong>5.输出单元</strong>:显示器，音响等</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/%E4%BA%94%E5%A4%A7%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86.png" alt="图片"></p><h3 id="二-计算机操作系统">二.计算机操作系统</h3><p>1.<strong>操作系统</strong>（<strong>O</strong>perating <strong>S</strong>ystem，<strong>OS</strong>）：管理和控制计算机系统中的硬件和软件资源，用于在用户和系统硬件之间传递消息</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/image.png" alt="图片"></p><p>**2.操作系统启动程序：**操作系统的启动分为传统模式，也就是基于bios的启动流程，另一种是当前的主流模式，也就是基于UEFI的启动流程。BIOS或者UEFI其实就是一段固化在主板上的程序，计算机启动时会默认运行这段程序，然后通过这段程序去运行主板引导项，UEFI是BIOS流程的升级版本，解决优化了BIOS启ootloader也就是操作系统引导程序，然后通过引导初始化操作系统。比如优化了BIOS自检流程，然后BIOS启动会配合MBR分区，无法引导启动超过2.2T的磁盘。而UEFI一般配合GPT分区，支持引导超过2.2T的磁盘。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/1.png" alt="图片"></p><h3 id="三-Linux系统概览">三.Linux系统概览</h3><p>**1.Linux版本：**内核版本+发行版本，其中Linux内核加常用软件为Linux发行版本。</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/2.png" alt="图片"></p><p><strong>2.查看Linux系统内核版本：</strong></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/3.png" alt="图片"></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/4.png" alt="图片"></p><p><strong>3.Linux系统应用领域：</strong></p><p>IT服务器（操作系统，虚拟化和云计算)，嵌入式和智能设备，个人办公桌面，学术研究和软件开发</p><h3 id="四-Linux系统结构">四.Linux系统结构</h3><p>**1.四个组成部分：**内核，shell，文件系统，应用程序</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/5.png" alt="图片"></p><h4 id="4-2-Linux系统结构–进程管理">4.2.Linux系统结构–进程管理</h4><p>**2.Linux体系结构：**内核是硬件和软件的一个中间层，是一个资源管理系统，提供一组面向系统的命令</p><p>体系结构子目录都包含许多其他子目录，这些子目录专注于内核的特定方面，如引导，内核，内存管理等</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/6.png" alt="图片"></p><p><strong>3.进程管理</strong></p><p>1.进程：是一个正在执行的一个程序或者命令，有自己的地址空间，占用一定的系统资源。一个CPU核同一时间只能运行一个进程，进程由它的进程ID（PID）和它父进程的进程ID（PPID）唯一识别</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/7.png" alt="图片"></p><p><strong>2.查看进程信息：</strong></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/8.png" alt="图片"></p><p>**3.进程调度：**进程调度是指操作系统按某种策略或者规则选择进程占用CPU进行运行的过程</p><ul><li><p>R(TASK_RUNNING) 可执行状态</p></li><li><p>S(TASK_INTERRUPTIBLE) 可中断的睡眠状态</p></li><li><p>D(TASK_UNINTERRUPTIBLE) 不可中断的睡眠状态</p></li><li><p>T(TASK_STOPPED OR TASK_TRACED) 暂停或者跟踪状态</p></li><li><p>Z(TASK_DEAD-EXIT_ZOMBIE) 退出状态，进程变为僵尸进程</p></li><li><p>X(TASK_DEAD-EXIT_DEAD) 退出状态，进程即将被销毁</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/9.png" alt="图片"></p></li></ul><p><strong>4.进程调度原则</strong></p><ul><li>一个CPU核同一时间只能运行一个进程</li><li>每个进程有近乎相等的执行时间</li><li>对于逻辑CPU而言进程调度使用轮询的方式执行，当轮询完成则回到第一个进程反复</li><li>进程执行消耗时间和进程量成正比</li></ul><p><strong>5.进程的系统调用</strong></p><p>内核空间（Kernal Space):系统内核运行的空间</p><p>用户空间（User Space):应用程序运行的空间</p><p>当进程运行在内核空间时就处于内核态，二进程运行在用户空间时则处于用户态</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/10.png" alt="图片"></p><h4 id="4-3Linux系统结构–文件系统">4.3Linux系统结构–文件系统</h4><p><strong>1.文件系统</strong>：文件系统负责管理持久化数据的子系统，负责把用户的文件存到磁盘硬件中，这样做最明显的好处是开发者仅需要一套API和开发工具即可调取Linux系统中绝大部分的资源。举个例子来说，Linux中几乎所有读（读文件，读系统状态读socket，读PIPE）的操作都可以用read函数来进行，几乎所有更改（更改文件，更改系统参数，写socket，写PIPE）的操作都可以用write函数来进行，使用任何硬件设备都必须与根目录下某一目录执行挂载操作</p><p><strong>2.存储</strong>：Linux文件系统是采用树状的目录结构，最上层是/（根）目录</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/11.png" alt="图片"></p><p><strong>/bin:</strong>  bin是Binaries(二进制文件)的缩写，这个目录存放着最经常使用的命令</p><p><strong>/boot:</strong>  这里存放的是启动Linux时使用的一些核心文件，包括一些链接文件以及镜像文件</p><p>**/dev: ** dev是Device（设备）的缩写，该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的</p><p>**/etc：**etc是Etcetera(等等)的缩写，这个目录用来存放所有的系统管理所需要的配置文件和子目录</p><p><strong>/home:</strong> 用户的主目录，在Linux中每个用户都有自己的一个目录，一般该目录名是以用户的账号命名的</p><p><strong>/lib:</strong>  lib是Library（库）的缩写，这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件，几乎所有的应用程序都需要用到这些共享库</p><p><strong>/mnt:</strong>  系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里面的内容了</p><p><strong>/opt:</strong> opt是optional（可选）的缩写，这是给主机额外安装软件所摆放的目录，比如你安装一个ORACLE数据库则可以放在这个目录下，默认是空的</p><p><strong>/proc:</strong> proc是processes（进程）的缩写，/proc是一种伪系统文件（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息</p><p><strong>/root:</strong> 该目录为系统管理员，也称作超级权限者的用户主目录</p><p><strong>/sbin:</strong> s是super user的意思，是Superuser Binaries(超级用户的二进制文件)的缩写，这里存放的是系统管理员使用的系统管理程序</p><p><strong>/usr:</strong> usr是unix shared resources（共享资源）的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于Windows下的program files目录</p><p><strong>3.虚拟文件系统（VFS）</strong>：</p><ul><li>对应用层提供一个标准的文件操作接口</li><li>对文件系统提供一个标准的文件接入接口</li></ul><p>虚拟系统文件系统使得Linux可以存在多个“实际的文件系统”，比如分区是1是ext2，分区2是ext3，分区3是fat32，那么每个“实际的文件系统”的结构和操作方式是不一样的。VFS作为中间层，用户直接控制VFS，VFS再控制各个文件系统</p><p><strong>4.查看文件系统类型</strong></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/12.png" alt="图片"></p><p><strong>5.文件基本操作</strong></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/13.png" alt="图片"></p><p><strong>6.文件读取流程</strong></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/14.png" alt="图片"></p><h4 id="4-4Linux系统结构–用户权限">4.4Linux系统结构–用户权限</h4><p><strong>1.用户账户</strong>：Linux是一个多用户的系统，可以多个用户登陆Linux</p><ul><li><p>用户账户</p><p>普通用户账户：在系统中进行普通作业</p><p>超级用户账户：在系统中对普通用户和整个系统进行管理</p></li><li><p>用户组</p><p>标准组：可以容纳多个用户</p><p>私有组：只有用户自己</p></li></ul><p><strong>2.文件权限：</strong></p><p>文件权限关于用户有三个概念：</p><p>所有组：文件的所有者</p><p>所在组：文件的所有者所在的组</p><p>其他人：除文件所有者及所在组外的其他人</p><p>每个用户对于文件都有不同权限，读R，写W，执行X</p><p><strong>3.查看用户信息</strong></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/15.png" alt="图片"></p><p><strong>4.用户权限操作</strong></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/16.png" alt="图片"></p><h3 id="五-Linux软件包操作">五.Linux软件包操作</h3><p><strong>1.软件包</strong>：</p><ul><li><p>软件包：通常指的是一个应用程序，他可以是一个GUI应用程序，命令行工具或者（其他软件程序需要的）软件库</p></li><li><p>软件包管理：</p><p>底层工具：主要用来处理安装和删除软件包文件等任务，DPKG，RPM</p><p>上层工具：主要用于数据的搜索任务和依赖解析任务，APT，YUM，DNF</p><p>YUM可以自动下载并安装所有需要的依赖项，但是RPM会告诉你安装一个依赖列表，然后你必须手动安装</p></li></ul><p><strong>2.软件包安装工具：</strong></p><p>RPM（Red Hat Package Manager),为Red Hat操作系统的包管理系统</p><p>DPKG（Debian package），为Debian操作系统的包管理系统</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/17.png" alt="图片"></p><p><strong>3.Debian Apt常用命令：</strong></p><ul><li>列出所有可更新的软件清单命令：apt update</li><li>安装指定的软件命令：apt install&lt;package_name&gt;</li><li>安装多个软件包： apt install &lt;package_1&gt; &lt;package_2&gt; &lt;package_3&gt;</li><li>更新指定的软件命令：apt update &lt;package_name&gt;</li><li>删除软件包命令：apt remove &lt;package_name&gt;</li><li>查找软件包命令：apt search &lt;key_word&gt;</li><li>列出所有已安装的包：apt list --installed</li></ul><p><strong>4.nginx安装</strong></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/18.png" alt="图片"></p><p><strong>5.nginx配置</strong></p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/19.png" alt="图片"></p>]]></content>
      
      
      <categories>
          
          <category> 字节前端训练营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
